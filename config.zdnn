# SPDX-License-Identifier: Apache-2.0
#
# Copyright IBM Corp. 2021
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is invoked by configure to set the initial values of
# certain platform-dependent variables.

target="$(uname -m)-$(uname)"

case "${target}" in
    s390x-Linux)
	CC=${CC:-gcc}
	CXX=${CXX:-g++}
	LD=${LD:-g++}
	AR=${AR:-ar}
	ARFLAGS="${ARFLAGS:--rc}"
	CFLAGS_INIT="-O3 -mzvector -Wall -std=gnu99 -fstack-protector-all ${CFLAGS_INIT:-}"
	CFLAGS_QUOTE_INIT="-Wall" # Not needed on Linux. Just repeat an option to prevent it from being empty.
	CFLAGS="-O3 -march=z14 -mzvector -Wall -std=gnu99 -fstack-protector-all ${CFLAGS:-}"
	CFLAGS_QUOTE="-Wall"
	CFLAGS_DEBUG="-O0 -g3 ${CFLAGS_DEBUG:-}"
	CFLAGS_SHARED="-fPIC ${CFLAGS_SHARED:-}"
	CFLAGS_ASM="-Wa,-adhln -fno-asynchronous-unwind-tables ${CFLAGS_ASM:-}"
	CFLAGS_OPT_EXPENSIVE="-funroll-loops"
	CFLAGS_NOSEARCH=""
	CXXFLAGS="-O3 -march=z14 -Wall ${CXXFLAGS:-}"
	CPP_SYMCHECK_FLAGS="-E -o zdnn.i"
	SODIR="${SODIR:-lib}"
	LIBNAME="${LIBNAME:-libzdnn}"
	LIBSONAME="${LIBSONAME:-${LIBNAME}.so.0}"
	LIBNAME_PRIVATE="${LIBNAME_PRIVATE:-${LIBNAME}-private}"
	LIBSONAME_PRIVATE="${LIBSONAME_PRIVATE:-${LIBNAME_PRIVATE}.so.0}"
	LDFLAGS="${LDFLAGS:-}"
	LDFLAGS_SHARED="-shared -Wl,-Bsymbolic-functions -Wl,-soname,${LIBSONAME} -Wl,--version-script=zdnn.map -lm ${LDFLAGS_SHARED:-}"
	LDFLAGS_SHARED_EXPORTALL="-shared -Wl,-Bsymbolic-functions -Wl,-soname,${LIBSONAME_PRIVATE} -Wl,--version-script=zdnn_exportall.map -lm ${LDFLAGS_SHARED_EXPORTALL:-}"
	LDFLAGS_TEST="-L ../zdnn/${SODIR} -l${LIBNAME_PRIVATE#lib} ../zdnn/${SODIR}/${LIBNAME_PRIVATE}.so -lm ${LDFLAGS_TEST:-}"
	LD_PATH_VAR="${LD_PATH_VAR:-LD_LIBRARY_PATH}"
	ECHOFLAGS="-e"
	ZDNN_TMAKE_FILES="t-static t-libsoname t-gccexpo t-symcheck t-listings"
	ZDNN_MAKE_TARGETS="${SODIR}/${LIBNAME}.a libsoname symcheck"
	ZDNN_INSTALL_TARGETS="install_libsoname install_static"
	;;
    *-OS/390)
	CC=${CC:-xlc}
	CXX=${CXX:-xlC}
	LD=${LD:-xlC}
	AR=${AR:-ar}
	ARFLAGS="${ARFLAGS:--rc}"
	CXXFLAGS="-I /usr/include -I /u/mvsbuild/zos25/usr/include/zos/ -Wc,ASM,LP64,INLINE,VECTOR ${CXXFLAGS:-}"
	CFLAGS_INIT="${CXXFLAGS} -qlanglvl=extc99 ${CFLAGS_INIT:-}"
	CFLAGS_QUOTE_INIT="-Wc,SUPPRESS(CCN4108),STACKPROTECT(ALL)" # The options with () require an extra pair of quotes in config.make.in
	CFLAGS="${CXXFLAGS} -qlanglvl=extc99 ${CFLAGS:-}"
	CFLAGS_QUOTE="-Wc,ARCH(12),SUPPRESS(CCN4108),STACKPROTECT(ALL)"
	CFLAGS_DEBUG="-g3 ${CFLAGS_DEBUG:-}"
	CFLAGS_SHARED="-Wc,DLL ${CFLAGS_SHARED:-}"
	CXXFLAGS_ASM='-Wc,"SOURCE,LIST"'" ${CXXFLAGS_ASM:-}"
	CFLAGS_ASM="${CXXFLAGS_ASM} -Wc,AGGREGATE ${CFLAGS_ASM:-}"
	CFLAGS_OPT_EXPENSIVE="-qhot"
	CFLAGS_NOSEARCH="-qnosearch"
	CPP_SYMCHECK_FLAGS="-P"
	SODIR="${SODIR:-lib}"
	LIBNAME="${LIBNAME:-libzdnn}"
	LIBSONAME="${LIBSONAME:-}"
	LIBNAME_PRIVATE="${LIBNAME_PRIVATE:-${LIBNAME}-private}"
	LIBSONAME_PRIVATE="${LIBSONAME_PRIVATE:-}"
	LDFLAGS="${LDFLAGS:-}"
	LDFLAGS_SHARED="-Wl,DLL -Wc,LP64 ${LDFLAGS_SHARED:-}"
	LDFLAGS_SHARED_EXPORTALL="${LDFLAGS_SHARED_EXPORTALL:-}"
	LDFLAGS_TEST="../zdnn/${SODIR}/${LIBNAME_PRIVATE}.x -lm ${LDFLAGS_TEST:-}"
	LD_PATH_VAR="${LD_PATH_VAR:-LIBPATH}"
	ECHOFLAGS=""
	ZDNN_TMAKE_FILES="t-xlcexpo t-symcheck t-listings"
	ZDNN_MAKE_TARGETS="${SODIR}/${LIBNAME}.x symcheck"
	ZDNN_INSTALL_TARGETS=""
	;;
    *)
	echo "Platform ${target} is not supported"
	exit 1
	;;
esac
